
Test Photocel.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000006  00800100  00000260  000002f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000260  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800106  00800106  000002fa  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000002fa  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000032c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000068  00000000  00000000  0000036c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000009b9  00000000  00000000  000003d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000007d6  00000000  00000000  00000d8d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000003de  00000000  00000000  00001563  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000d0  00000000  00000000  00001944  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000451  00000000  00000000  00001a14  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000158  00000000  00000000  00001e65  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000058  00000000  00000000  00001fbd  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e0 e6       	ldi	r30, 0x60	; 96
  7c:	f2 e0       	ldi	r31, 0x02	; 2
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a6 30       	cpi	r26, 0x06	; 6
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a6 e0       	ldi	r26, 0x06	; 6
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a8 30       	cpi	r26, 0x08	; 8
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <main>
  9e:	0c 94 2e 01 	jmp	0x25c	; 0x25c <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <init_ports>:
	
	//char uart_getchar(void) {
	//	loop_until_bit_is_set(UCSR0A, RXC0); /* Wait until data exists. */
	//	return UDR0;
	//}
}
  a6:	52 9a       	sbi	0x0a, 2	; 10
  a8:	08 95       	ret

000000aa <init_adc>:
  aa:	80 e6       	ldi	r24, 0x60	; 96
  ac:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
  b0:	87 e8       	ldi	r24, 0x87	; 135
  b2:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
  b6:	08 95       	ret

000000b8 <get_adc_value>:
  b8:	ea e7       	ldi	r30, 0x7A	; 122
  ba:	f0 e0       	ldi	r31, 0x00	; 0
  bc:	80 81       	ld	r24, Z
  be:	80 64       	ori	r24, 0x40	; 64
  c0:	80 83       	st	Z, r24
  c2:	80 81       	ld	r24, Z
  c4:	86 fd       	sbrc	r24, 6
  c6:	fd cf       	rjmp	.-6      	; 0xc2 <get_adc_value+0xa>
  c8:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
  cc:	08 95       	ret

000000ce <uart_init>:
  ce:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
  d2:	83 e3       	ldi	r24, 0x33	; 51
  d4:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
  d8:	10 92 c0 00 	sts	0x00C0, r1	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
  dc:	88 e1       	ldi	r24, 0x18	; 24
  de:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
  e2:	86 e0       	ldi	r24, 0x06	; 6
  e4:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
  e8:	08 95       	ret

000000ea <transmit>:
  ea:	e0 ec       	ldi	r30, 0xC0	; 192
  ec:	f0 e0       	ldi	r31, 0x00	; 0
  ee:	90 81       	ld	r25, Z
  f0:	95 ff       	sbrs	r25, 5
  f2:	fd cf       	rjmp	.-6      	; 0xee <transmit+0x4>
  f4:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
  f8:	08 95       	ret

000000fa <USART_putstring>:
  fa:	cf 93       	push	r28
  fc:	df 93       	push	r29
  fe:	ec 01       	movw	r28, r24
 100:	88 81       	ld	r24, Y
 102:	88 23       	and	r24, r24
 104:	31 f0       	breq	.+12     	; 0x112 <USART_putstring+0x18>
 106:	21 96       	adiw	r28, 0x01	; 1
 108:	0e 94 75 00 	call	0xea	; 0xea <transmit>
 10c:	89 91       	ld	r24, Y+
 10e:	81 11       	cpse	r24, r1
 110:	fb cf       	rjmp	.-10     	; 0x108 <USART_putstring+0xe>
 112:	df 91       	pop	r29
 114:	cf 91       	pop	r28
 116:	08 95       	ret

00000118 <lampjes>:
	}
	return 0;
}

void lampjes(){
	while(adc_result0 > max_licht){
 118:	20 91 06 01 	lds	r18, 0x0106	; 0x800106 <__data_end>
 11c:	30 91 07 01 	lds	r19, 0x0107	; 0x800107 <__data_end+0x1>
 120:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 124:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 128:	82 17       	cp	r24, r18
 12a:	93 07       	cpc	r25, r19
 12c:	b4 f4       	brge	.+44     	; 0x15a <lampjes+0x42>
		PORTD |= _BV(2);
 12e:	5a 9a       	sbi	0x0b, 2	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 130:	2f ef       	ldi	r18, 0xFF	; 255
 132:	83 ed       	ldi	r24, 0xD3	; 211
 134:	90 e3       	ldi	r25, 0x30	; 48
 136:	21 50       	subi	r18, 0x01	; 1
 138:	80 40       	sbci	r24, 0x00	; 0
 13a:	90 40       	sbci	r25, 0x00	; 0
 13c:	e1 f7       	brne	.-8      	; 0x136 <lampjes+0x1e>
 13e:	00 c0       	rjmp	.+0      	; 0x140 <lampjes+0x28>
 140:	00 00       	nop
		_delay_ms(1000);
		PORTD &= ~(_BV(2));
 142:	5a 98       	cbi	0x0b, 2	; 11
	}
	return 0;
}

void lampjes(){
	while(adc_result0 > max_licht){
 144:	20 91 06 01 	lds	r18, 0x0106	; 0x800106 <__data_end>
 148:	30 91 07 01 	lds	r19, 0x0107	; 0x800107 <__data_end+0x1>
 14c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 150:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 154:	82 17       	cp	r24, r18
 156:	93 07       	cpc	r25, r19
 158:	54 f3       	brlt	.-44     	; 0x12e <lampjes+0x16>
 15a:	08 95       	ret

0000015c <serial_conn>:
	//}
}



int serial_conn(void){
 15c:	cf 93       	push	r28
 15e:	df 93       	push	r29
 160:	cd b7       	in	r28, 0x3d	; 61
 162:	de b7       	in	r29, 0x3e	; 62
 164:	2a 97       	sbiw	r28, 0x0a	; 10
 166:	0f b6       	in	r0, 0x3f	; 63
 168:	f8 94       	cli
 16a:	de bf       	out	0x3e, r29	; 62
 16c:	0f be       	out	0x3f, r0	; 63
 16e:	cd bf       	out	0x3d, r28	; 61
	uart_init();
 170:	0e 94 67 00 	call	0xce	; 0xce <uart_init>
	while (1) {
		USART_putstring(String);
 174:	82 e0       	ldi	r24, 0x02	; 2
 176:	91 e0       	ldi	r25, 0x01	; 1
 178:	0e 94 7d 00 	call	0xfa	; 0xfa <USART_putstring>
		
		//convert int to string
		
		adc_result0 = get_adc_value() * 10;
 17c:	0e 94 5c 00 	call	0xb8	; 0xb8 <get_adc_value>
 180:	28 2f       	mov	r18, r24
 182:	30 e0       	ldi	r19, 0x00	; 0
 184:	c9 01       	movw	r24, r18
 186:	88 0f       	add	r24, r24
 188:	99 1f       	adc	r25, r25
 18a:	22 0f       	add	r18, r18
 18c:	33 1f       	adc	r19, r19
 18e:	22 0f       	add	r18, r18
 190:	33 1f       	adc	r19, r19
 192:	22 0f       	add	r18, r18
 194:	33 1f       	adc	r19, r19
 196:	82 0f       	add	r24, r18
 198:	93 1f       	adc	r25, r19
 19a:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <__data_end+0x1>
 19e:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <__data_end>
		char buffer[10];
		itoa(adc_result0, buffer, 10);
 1a2:	4a e0       	ldi	r20, 0x0A	; 10
 1a4:	50 e0       	ldi	r21, 0x00	; 0
 1a6:	be 01       	movw	r22, r28
 1a8:	6f 5f       	subi	r22, 0xFF	; 255
 1aa:	7f 4f       	sbci	r23, 0xFF	; 255
 1ac:	0e 94 ee 00 	call	0x1dc	; 0x1dc <itoa>
		USART_putstring(buffer);
 1b0:	ce 01       	movw	r24, r28
 1b2:	01 96       	adiw	r24, 0x01	; 1
 1b4:	0e 94 7d 00 	call	0xfa	; 0xfa <USART_putstring>
		lampjes();
 1b8:	0e 94 8c 00 	call	0x118	; 0x118 <lampjes>
 1bc:	2f ef       	ldi	r18, 0xFF	; 255
 1be:	83 ed       	ldi	r24, 0xD3	; 211
 1c0:	90 e3       	ldi	r25, 0x30	; 48
 1c2:	21 50       	subi	r18, 0x01	; 1
 1c4:	80 40       	sbci	r24, 0x00	; 0
 1c6:	90 40       	sbci	r25, 0x00	; 0
 1c8:	e1 f7       	brne	.-8      	; 0x1c2 <serial_conn+0x66>
 1ca:	00 c0       	rjmp	.+0      	; 0x1cc <serial_conn+0x70>
 1cc:	00 00       	nop
 1ce:	d2 cf       	rjmp	.-92     	; 0x174 <serial_conn+0x18>

000001d0 <main>:
	DDRD |= _BV(DDD2);
	}
	
int main(void)
{
	init_ports();
 1d0:	0e 94 53 00 	call	0xa6	; 0xa6 <init_ports>
	init_adc();
 1d4:	0e 94 55 00 	call	0xaa	; 0xaa <init_adc>
	serial_conn();
 1d8:	0e 94 ae 00 	call	0x15c	; 0x15c <serial_conn>

000001dc <itoa>:
 1dc:	45 32       	cpi	r20, 0x25	; 37
 1de:	51 05       	cpc	r21, r1
 1e0:	20 f4       	brcc	.+8      	; 0x1ea <itoa+0xe>
 1e2:	42 30       	cpi	r20, 0x02	; 2
 1e4:	10 f0       	brcs	.+4      	; 0x1ea <itoa+0xe>
 1e6:	0c 94 f9 00 	jmp	0x1f2	; 0x1f2 <__itoa_ncheck>
 1ea:	fb 01       	movw	r30, r22
 1ec:	10 82       	st	Z, r1
 1ee:	cb 01       	movw	r24, r22
 1f0:	08 95       	ret

000001f2 <__itoa_ncheck>:
 1f2:	bb 27       	eor	r27, r27
 1f4:	4a 30       	cpi	r20, 0x0A	; 10
 1f6:	31 f4       	brne	.+12     	; 0x204 <__itoa_ncheck+0x12>
 1f8:	99 23       	and	r25, r25
 1fa:	22 f4       	brpl	.+8      	; 0x204 <__itoa_ncheck+0x12>
 1fc:	bd e2       	ldi	r27, 0x2D	; 45
 1fe:	90 95       	com	r25
 200:	81 95       	neg	r24
 202:	9f 4f       	sbci	r25, 0xFF	; 255
 204:	0c 94 05 01 	jmp	0x20a	; 0x20a <__utoa_common>

00000208 <__utoa_ncheck>:
 208:	bb 27       	eor	r27, r27

0000020a <__utoa_common>:
 20a:	fb 01       	movw	r30, r22
 20c:	55 27       	eor	r21, r21
 20e:	aa 27       	eor	r26, r26
 210:	88 0f       	add	r24, r24
 212:	99 1f       	adc	r25, r25
 214:	aa 1f       	adc	r26, r26
 216:	a4 17       	cp	r26, r20
 218:	10 f0       	brcs	.+4      	; 0x21e <__utoa_common+0x14>
 21a:	a4 1b       	sub	r26, r20
 21c:	83 95       	inc	r24
 21e:	50 51       	subi	r21, 0x10	; 16
 220:	b9 f7       	brne	.-18     	; 0x210 <__utoa_common+0x6>
 222:	a0 5d       	subi	r26, 0xD0	; 208
 224:	aa 33       	cpi	r26, 0x3A	; 58
 226:	08 f0       	brcs	.+2      	; 0x22a <__utoa_common+0x20>
 228:	a9 5d       	subi	r26, 0xD9	; 217
 22a:	a1 93       	st	Z+, r26
 22c:	00 97       	sbiw	r24, 0x00	; 0
 22e:	79 f7       	brne	.-34     	; 0x20e <__utoa_common+0x4>
 230:	b1 11       	cpse	r27, r1
 232:	b1 93       	st	Z+, r27
 234:	11 92       	st	Z+, r1
 236:	cb 01       	movw	r24, r22
 238:	0c 94 1e 01 	jmp	0x23c	; 0x23c <strrev>

0000023c <strrev>:
 23c:	dc 01       	movw	r26, r24
 23e:	fc 01       	movw	r30, r24
 240:	67 2f       	mov	r22, r23
 242:	71 91       	ld	r23, Z+
 244:	77 23       	and	r23, r23
 246:	e1 f7       	brne	.-8      	; 0x240 <strrev+0x4>
 248:	32 97       	sbiw	r30, 0x02	; 2
 24a:	04 c0       	rjmp	.+8      	; 0x254 <strrev+0x18>
 24c:	7c 91       	ld	r23, X
 24e:	6d 93       	st	X+, r22
 250:	70 83       	st	Z, r23
 252:	62 91       	ld	r22, -Z
 254:	ae 17       	cp	r26, r30
 256:	bf 07       	cpc	r27, r31
 258:	c8 f3       	brcs	.-14     	; 0x24c <strrev+0x10>
 25a:	08 95       	ret

0000025c <_exit>:
 25c:	f8 94       	cli

0000025e <__stop_program>:
 25e:	ff cf       	rjmp	.-2      	; 0x25e <__stop_program>


Test Photocel.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000004  00800100  000001f8  0000026c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001f8  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000270  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000002a0  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000058  00000000  00000000  000002e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000917  00000000  00000000  00000338  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000007c9  00000000  00000000  00000c4f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000381  00000000  00000000  00001418  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000b0  00000000  00000000  0000179c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000434  00000000  00000000  0000184c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000013c  00000000  00000000  00001c80  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000048  00000000  00000000  00001dbc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e8 ef       	ldi	r30, 0xF8	; 248
  7c:	f1 e0       	ldi	r31, 0x01	; 1
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a4 30       	cpi	r26, 0x04	; 4
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	0e 94 b6 00 	call	0x16c	; 0x16c <main>
  8e:	0c 94 fa 00 	jmp	0x1f4	; 0x1f4 <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <init_adc>:
unsigned char USART_receive(void){
	
	while(!(UCSR0A & (1<<RXC0)));
	return UDR0;
	
}
  96:	80 e6       	ldi	r24, 0x60	; 96
  98:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
  9c:	87 e8       	ldi	r24, 0x87	; 135
  9e:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
  a2:	08 95       	ret

000000a4 <get_adc_value>:
  a4:	ea e7       	ldi	r30, 0x7A	; 122
  a6:	f0 e0       	ldi	r31, 0x00	; 0
  a8:	80 81       	ld	r24, Z
  aa:	80 64       	ori	r24, 0x40	; 64
  ac:	80 83       	st	Z, r24
  ae:	80 81       	ld	r24, Z
  b0:	86 fd       	sbrc	r24, 6
  b2:	fd cf       	rjmp	.-6      	; 0xae <get_adc_value+0xa>
  b4:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
  b8:	08 95       	ret

000000ba <uart_init>:
  ba:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
  be:	83 e3       	ldi	r24, 0x33	; 51
  c0:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
  c4:	10 92 c0 00 	sts	0x00C0, r1	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
  c8:	88 e0       	ldi	r24, 0x08	; 8
  ca:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
  ce:	86 e0       	ldi	r24, 0x06	; 6
  d0:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
  d4:	08 95       	ret

000000d6 <transmit>:
  d6:	e0 ec       	ldi	r30, 0xC0	; 192
  d8:	f0 e0       	ldi	r31, 0x00	; 0
  da:	90 81       	ld	r25, Z
  dc:	95 ff       	sbrs	r25, 5
  de:	fd cf       	rjmp	.-6      	; 0xda <transmit+0x4>
  e0:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
  e4:	08 95       	ret

000000e6 <USART_putstring>:
  e6:	cf 93       	push	r28
  e8:	df 93       	push	r29
  ea:	ec 01       	movw	r28, r24
  ec:	88 81       	ld	r24, Y
  ee:	88 23       	and	r24, r24
  f0:	31 f0       	breq	.+12     	; 0xfe <USART_putstring+0x18>
  f2:	21 96       	adiw	r28, 0x01	; 1
  f4:	0e 94 6b 00 	call	0xd6	; 0xd6 <transmit>
  f8:	89 91       	ld	r24, Y+
  fa:	81 11       	cpse	r24, r1
  fc:	fb cf       	rjmp	.-10     	; 0xf4 <USART_putstring+0xe>
  fe:	df 91       	pop	r29
 100:	cf 91       	pop	r28
 102:	08 95       	ret

00000104 <serial_conn>:



int serial_conn(void){
 104:	cf 93       	push	r28
 106:	df 93       	push	r29
 108:	cd b7       	in	r28, 0x3d	; 61
 10a:	de b7       	in	r29, 0x3e	; 62
 10c:	2a 97       	sbiw	r28, 0x0a	; 10
 10e:	0f b6       	in	r0, 0x3f	; 63
 110:	f8 94       	cli
 112:	de bf       	out	0x3e, r29	; 62
 114:	0f be       	out	0x3f, r0	; 63
 116:	cd bf       	out	0x3d, r28	; 61
	uart_init();
 118:	0e 94 5d 00 	call	0xba	; 0xba <uart_init>
	while (1) {
		USART_putstring(String);
 11c:	80 e0       	ldi	r24, 0x00	; 0
 11e:	91 e0       	ldi	r25, 0x01	; 1
 120:	0e 94 73 00 	call	0xe6	; 0xe6 <USART_putstring>
		
		//convert int to string
		
		int adc_result0 = get_adc_value() * 10;
 124:	0e 94 52 00 	call	0xa4	; 0xa4 <get_adc_value>
		char buffer[10];
		itoa(adc_result0, buffer, 10);
 128:	28 2f       	mov	r18, r24
 12a:	30 e0       	ldi	r19, 0x00	; 0
 12c:	c9 01       	movw	r24, r18
 12e:	88 0f       	add	r24, r24
 130:	99 1f       	adc	r25, r25
 132:	22 0f       	add	r18, r18
 134:	33 1f       	adc	r19, r19
 136:	22 0f       	add	r18, r18
 138:	33 1f       	adc	r19, r19
 13a:	22 0f       	add	r18, r18
 13c:	33 1f       	adc	r19, r19
 13e:	4a e0       	ldi	r20, 0x0A	; 10
 140:	50 e0       	ldi	r21, 0x00	; 0
 142:	be 01       	movw	r22, r28
 144:	6f 5f       	subi	r22, 0xFF	; 255
 146:	7f 4f       	sbci	r23, 0xFF	; 255
 148:	82 0f       	add	r24, r18
 14a:	93 1f       	adc	r25, r19
 14c:	0e 94 ba 00 	call	0x174	; 0x174 <itoa>
		USART_putstring(buffer);
 150:	ce 01       	movw	r24, r28
 152:	01 96       	adiw	r24, 0x01	; 1
 154:	0e 94 73 00 	call	0xe6	; 0xe6 <USART_putstring>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 158:	2f ef       	ldi	r18, 0xFF	; 255
 15a:	83 ed       	ldi	r24, 0xD3	; 211
 15c:	90 e3       	ldi	r25, 0x30	; 48
 15e:	21 50       	subi	r18, 0x01	; 1
 160:	80 40       	sbci	r24, 0x00	; 0
 162:	90 40       	sbci	r25, 0x00	; 0
 164:	e1 f7       	brne	.-8      	; 0x15e <serial_conn+0x5a>
 166:	00 c0       	rjmp	.+0      	; 0x168 <serial_conn+0x64>
 168:	00 00       	nop
 16a:	d8 cf       	rjmp	.-80     	; 0x11c <serial_conn+0x18>

0000016c <main>:
//Defines
#define UBBRVAL 51

int main(void)
{
	init_adc();
 16c:	0e 94 4b 00 	call	0x96	; 0x96 <init_adc>
	serial_conn();
 170:	0e 94 82 00 	call	0x104	; 0x104 <serial_conn>

00000174 <itoa>:
 174:	45 32       	cpi	r20, 0x25	; 37
 176:	51 05       	cpc	r21, r1
 178:	20 f4       	brcc	.+8      	; 0x182 <itoa+0xe>
 17a:	42 30       	cpi	r20, 0x02	; 2
 17c:	10 f0       	brcs	.+4      	; 0x182 <itoa+0xe>
 17e:	0c 94 c5 00 	jmp	0x18a	; 0x18a <__itoa_ncheck>
 182:	fb 01       	movw	r30, r22
 184:	10 82       	st	Z, r1
 186:	cb 01       	movw	r24, r22
 188:	08 95       	ret

0000018a <__itoa_ncheck>:
 18a:	bb 27       	eor	r27, r27
 18c:	4a 30       	cpi	r20, 0x0A	; 10
 18e:	31 f4       	brne	.+12     	; 0x19c <__itoa_ncheck+0x12>
 190:	99 23       	and	r25, r25
 192:	22 f4       	brpl	.+8      	; 0x19c <__itoa_ncheck+0x12>
 194:	bd e2       	ldi	r27, 0x2D	; 45
 196:	90 95       	com	r25
 198:	81 95       	neg	r24
 19a:	9f 4f       	sbci	r25, 0xFF	; 255
 19c:	0c 94 d1 00 	jmp	0x1a2	; 0x1a2 <__utoa_common>

000001a0 <__utoa_ncheck>:
 1a0:	bb 27       	eor	r27, r27

000001a2 <__utoa_common>:
 1a2:	fb 01       	movw	r30, r22
 1a4:	55 27       	eor	r21, r21
 1a6:	aa 27       	eor	r26, r26
 1a8:	88 0f       	add	r24, r24
 1aa:	99 1f       	adc	r25, r25
 1ac:	aa 1f       	adc	r26, r26
 1ae:	a4 17       	cp	r26, r20
 1b0:	10 f0       	brcs	.+4      	; 0x1b6 <__utoa_common+0x14>
 1b2:	a4 1b       	sub	r26, r20
 1b4:	83 95       	inc	r24
 1b6:	50 51       	subi	r21, 0x10	; 16
 1b8:	b9 f7       	brne	.-18     	; 0x1a8 <__utoa_common+0x6>
 1ba:	a0 5d       	subi	r26, 0xD0	; 208
 1bc:	aa 33       	cpi	r26, 0x3A	; 58
 1be:	08 f0       	brcs	.+2      	; 0x1c2 <__utoa_common+0x20>
 1c0:	a9 5d       	subi	r26, 0xD9	; 217
 1c2:	a1 93       	st	Z+, r26
 1c4:	00 97       	sbiw	r24, 0x00	; 0
 1c6:	79 f7       	brne	.-34     	; 0x1a6 <__utoa_common+0x4>
 1c8:	b1 11       	cpse	r27, r1
 1ca:	b1 93       	st	Z+, r27
 1cc:	11 92       	st	Z+, r1
 1ce:	cb 01       	movw	r24, r22
 1d0:	0c 94 ea 00 	jmp	0x1d4	; 0x1d4 <strrev>

000001d4 <strrev>:
 1d4:	dc 01       	movw	r26, r24
 1d6:	fc 01       	movw	r30, r24
 1d8:	67 2f       	mov	r22, r23
 1da:	71 91       	ld	r23, Z+
 1dc:	77 23       	and	r23, r23
 1de:	e1 f7       	brne	.-8      	; 0x1d8 <strrev+0x4>
 1e0:	32 97       	sbiw	r30, 0x02	; 2
 1e2:	04 c0       	rjmp	.+8      	; 0x1ec <strrev+0x18>
 1e4:	7c 91       	ld	r23, X
 1e6:	6d 93       	st	X+, r22
 1e8:	70 83       	st	Z, r23
 1ea:	62 91       	ld	r22, -Z
 1ec:	ae 17       	cp	r26, r30
 1ee:	bf 07       	cpc	r27, r31
 1f0:	c8 f3       	brcs	.-14     	; 0x1e4 <strrev+0x10>
 1f2:	08 95       	ret

000001f4 <_exit>:
 1f4:	f8 94       	cli

000001f6 <__stop_program>:
 1f6:	ff cf       	rjmp	.-2      	; 0x1f6 <__stop_program>
